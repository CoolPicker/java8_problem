package com.jvm;

/**
 * 疯狂Java程序员的自我修养 ----- 李刚
 *
 * 数组 -- 静态初始化
 *     -- 动态初始化: 指定数组的长度,即为每个数组元素指定所需的内存空间,
 *                  系统将负责为这些数组元素分配初始值.指定初始值时,系统将按照如下规则分配初始值:
 *                      1.基本类型中的整型 byte short int long,数组元素的值为0
 *                      2.基本类型中的浮点类型 float double ,数组元素的值为0.0
 *                      3.基本类型中的字符类型 char,数组元素的值为 '\u0000'
 *                      4.基本类型中的布尔类型 boolean,数组元素的值为false
 *                      5.引用类型(类/接口和数组),数组元素的值为null
 *  Java数组时静态的,一旦数组初始化完成,数组元素的内存空间分配即结束,
 *  程序只需改变数组元素的值,而无法改变数组的长度.
 *  注意: Java的数组变量是一种引用类型的变量,数组变量并不是数组本身,它只是指向堆内存中的数组对象.
 *      与Java这种静态语言不同的是,JavaScript这种动态语言的数组长度是可以动态改变的.
 *
 *  Java内存分配机制:
 *  Java的数组变量只是引用类型的变量,它并不是数组对象本身,只要让数组变量指向有效的数组对象,程序中即可使用该数组变量.
 *
 *  在使用Java数组之前必须先进行初始化.注意数组变量和数组对象的区别.
 *      数组变量只是一个引用变量(类似C语言里的指针);而数组对象就是保存在堆内存中的连续内存空间.
 *      对数组执行初始化,其实并不是对数组变量执行初始化,而是在堆内存中创建数组对象----也就是为该数组对象分配一块连续的内存空间,
 *      这块连续的内存空间的长度就是数组的长度.
 *      故而,对于数组变量来说,它并不需要进行所谓的初始化,只要将数组变量指向一个有效的数组对象,程序即可正常使用该数组变量.
 */
public class CrazyHelloWorld {

    public static void main(String[] args) {
        // 定义并初始化数组
        int[] nums = new int[]{3,7,67,89};
        // 定义一个数组变量
        int[] prices;
        // 让prices数组指向nums所引用的数组
        prices = nums;
        for (int i = 0 ; i < prices.length;i++) {
            System.out.println(prices[i]);
        }
        prices[2] = 21;
        System.out.println(nums[2]);

        int[] mm = null;
        // 数组引用变量mm未引用一个有效的数组对象
        System.out.println(mm.length);
        mm = new int[5];
        System.out.println(mm.length);

    }

}
